Project Marking Scheme  (20%)

Readme file (10%)
: 1 / 4
    - Design description is clear and helpful
    - Instructions on how to connect to app, or install and run are provided
    - Description of anything not complete or not working
    - Description of any enhancements
    - Reasonably well-written

Required features  (40%)
: 14 / 16
    - Graders will use some discretion about required features, remembering that the focus of the course is on web programming skills (JavaScript, AJAX, DOM manipulation, Data management)
    - user profiles, authentication
    - reasonable data set
    - admin functionality
    - sufficient user interaction
    - search (depends on application)
    - several different views

Architecture (15%)
: 5 / 6
    - follows a standard architecture
    - code is well-organized, readable, and documented
    - interface to front end (RESTful API?) is clear

Database (approximately 7%)
: 3 / 3
    - Data is managed well
    - Interface to database is clear

User interface/Front end (10%)
: 3 / 4
    - A plain look and feel is fine
    - Emphasis here is on organization of UI, DOM manipulation, use of forms.

Hosting/Deployment(approximately 3%)
: 1 / 1
    - Hosted for easy use by graders
    - If not hosted, instructions for the graders on how to set up and run are clear an easy to follow

Creativity/Additional features(15%)
: 5 / 6
    - As discussed in class and on the bulletin boards this category is broad ranging.
    - Possible additional features include:
        - good testing
        - responsive UI
        - significant UI
        - interesting back end algorthms
        - preventative security measures
        - anything that particularly impresses the graders (remembering that students new to web programming this term can also do impressive work)

Total:
: 32 / 40

Feedback:
- Most README info added after deadline
- Search breaks when performing a search for something that doesn't exist
- Had validation for registration fields, but can write arbitrary text when editing profile
- Templating languages like EJS or nunchuks could help with handling dynamic view content (e.g. creating tables, different "Hi, ..." messages; similar to viewProfile)
- Instead of having `ajaxCall` in every front-end script file, you could make a single script that's included in the HTML first with it
- Should also try organizing schemas into separate files
- Admin functionality is fairly basic
- Additional features: UI work, some validation, secured routes